TYPE : int
ID: a
ASSIGN: =
NUM: 10
SEMI: ;
TYPE : char*
ID: func
LEFT PARENTHESIS: (
TYPE : int
ID: x
COMMA: ,
TYPE : int
ID: y
RIGHT PARENTHESIS: )
SEMI: ;
TYPE : int
ID: main
LEFT PARENTHESIS: (
RIGHT PARENTHESIS: )
LEFT BRACES: {
ID: printf
LEFT PARENTHESIS: (
STRING: "This is a function: %s\n"
COMMA: ,
ID: var
RIGHT PARENTHESIS: )
SEMI: ;
TYPE : int
ID: y
SEMI: ;
WHILE: while
LEFT PARENTHESIS: (
ID: i
LESSER THAN: <
NUM: 10
RIGHT PARENTHESIS: )
LEFT BRACES: {
ID: y
ASSIGN: =
ID: func
LEFT PARENTHESIS: (
ID: func
LEFT PARENTHESIS: (
ID: a
COMMA: ,
ID: b
RIGHT PARENTHESIS: )
RIGHT PARENTHESIS: )
PLUS: +
ID: x
SEMI: ;
RIGHT BRACES: }
IF: if
LEFT PARENTHESIS: (
ID: y
EQUAL: ==
NUM: 0
RIGHT PARENTHESIS: )
LEFT BRACES: {
ID: printf
LEFT PARENTHESIS: (
STRING: "This is a sentence"
RIGHT PARENTHESIS: )
SEMI: ;
RIGHT BRACES: }
ELSE: else
LEFT BRACES: {
ID: printf
LEFT PARENTHESIS: (
STRING: "This is another sentence"
RIGHT PARENTHESIS: )
SEMI: ;
RIGHT BRACES: }
RETURN: return
NUM: 15
SEMI: ;
RIGHT BRACES: }
